// Char : ASCII character

//   0 :   NULL (Null character)
//   1 :   SOH (Start of Header)
//   2 :   STX (Start of Text)
//   3 :   ETX (End of Text)
//   4 :   EOT (End of Transmission)
//   5 :   ENQ (Enquiry)
//   6 :   ACK (Acknowledgement)
//   7 :   BEL (Bell)
//   8 :   BS (Backspace)
//   9 :   HT (Horizontal Tab)
//   10 :  LF (Line feed)
//   11 :  VT (Vertical Tab)
//   12 :  FF (Form feed)
//   13 :  CR (Carriage return)
//   14 :  SO (Shift Out)
//   15 :  SI (Shift In)
//   16 :  DLE (Data link escape)
//   17 :  DC1 (Device control 1)
//   18 :  DC2 (Device control 2)
//   19 :  DC3 (Device control 3)
//   20 :  DC4 (Device control 4)
//   21 :  NAK (Negative acknowledgement)
//   22 :  SYN (Synchronous idle)
//   23 :  ETB (End of transmission block)
//   24 :  CAN (Cancel)
//   25 :  EM (End of medium)
//   26 :  SUB (Substitute)
//   27 :  ESC (Escape)
//   28 :  FS (File separator)
//   29 :  GS (Group separator)
//   30 :  RS (Record separator)
//   31 :  US (Unit separator)
//   32 :  (Space)
//   33 :  ! (Exclamation mark)
//   34 :  " (Quotation mark ; quotes)
//   35 :  # (Number sign)
//   36 :  $ (Dollar sign)
//   37 :  % (Percent sign)
//   38 :  & (Ampersand)
//   39 :  ' (Apostrophe)
//   40 :  ( (round brackets or parentheses)
//   41 :  ) (round brackets or parentheses)
//   42 :  * (Asterisk)
//   43 :  + (Plu//44 : , (Comma)
//   45 :  - (Hyphen)
//   46 :  . (Dot , full stop)
//   47 :  / (Slash)
//   48 :  0 (number zero)
//   49 :  1 (number one)
//   50 :  2 (number two)
//   51 :  3 (number three)
//   52 :  4 (number four)
//   53 :  5 (number five)
//   54 :  6 (number six)
//   55 :  7 (number seven)
//   56 :  8 (number eight)
//   57 :  9 (number nine)
//   58 :  : (Colon)
//   59 :  ; (Semicolon)
//   60 :  < (Less-than sign)
//   61 :  = (Equals sign)
//   62 :  > (Greater-than sign ; Inequality)
//   63 :  ? (Question mark)
//   64 :  @ (At sign)
//   65 :  A (Capital A)
//   66 :  B (Capital B)
//   67 :  C (Capital C)
//   68 :  D (Capital D)
//   69 :  E (Capital E)
//   70 :  F (Capital F)
//   71 :  G (Capital G)
//   72 :  H (Capital H)
//   73 :  I (Capital I)
//   74 :  J (Capital J)
//   75 :  K (Capital K)
//   76 :  L (Capital L)
//   77 :  M (Capital M)
//   78 :  N (Capital N)
//   79 :  O (Capital O)
//   80 :  P (Capital P)
//   81 :  Q (Capital Q)
//   82 :  R (Capital R)
//   83 :  S (Capital S)
//   84 :  T (Capital T)
//   85 :  U (Capital U)
//   86 :  V (Capital V)
//   87 :  W (Capital W)
//   88 :  X (Capital X)
//   89 :  Y (Capital Y)
//   90 :  Z (Capital Z)
//   91 :  [ (square brackets or box br//92 : \ (Backslash)
//   93 :  ] (square brackets or box brackets)
//   94 :  ^ (Caret or circumflex accent)
//   95 :  _ (underscore , understrike , underbar or low line)
//   96 :  ` (Grave accent)
//   97 :  a (Lowercase a )
//   98 :  b (Lowercase b )
//   99 :  c (Lowercase c )
//   100 : d (Lowercase d )
//   101 : e (Lowercase e )
//   102 : f (Lowercase f )
//   103 : g (Lowercase g )
//   104 : h (Lowercase h )
//   105 : i (Lowercase i )
//   106 : j (Lowercase j )
//   107 : k (Lowercase k )
//   108 : l (Lowercase l )
//   109 : m (Lowercase m )
//   110 : n (Lowercase n )
//   111 : o (Lowercase o )
//   112 : p (Lowercase p )
//   113 : q (Lowercase q )
//   114 : r (Lowercase r )
//   115 : s (Lowercase s )
//   116 : t (Lowercase t )
//   117 : u (Lowercase u )
//   118 : v (Lowercase v )
//   119 : w (Lowercase w )
//   120 : x (Lowercase x )
//   121 : y (Lowercase y )
//   122 : z (Lowercase z )
//   123 : { (curly brackets or braces)
//   124 : | (vertical-bar, vbar, vertical line or vertical slash)
//   125 : } (curly brackets or braces)
//   126 : ~ (Tilde ; swung dash)
//   127 : DEL (Delete)
//   128 : Ç (Majuscule C-cedilla )
//   129 : ü (letter "u" with umlaut or diaeresis ; "u-umlaut")
//   130 : é (letter "e" with acute accent or "e-acute")
//   131 : â (letter "a" with circumflex accent or "a-circumflex")
//   132 : ä (letter "a" with umlaut or diaeresis ; "a-umlaut")
//   133 : à (letter "a" with grave accent)
//   134 : å (letter "a" with a ring)
//   135 : ç (Minuscule c-cedilla)
//   136 : ê (letter "e" with circumflex accent or "e-circumflex")
//   137 : ë (letter "e" with umlaut or diaeresis ; "e-umlaut")
//   138 : è (letter "e" with grave //139 : ï (letter "i" with umlaut or diaeresis ; "i-umlaut")
//   140 : î (letter "i" with circumflex accent or "i-circumflex")
//   141 : ì (letter "i" with grave accent)
//   142 : Ä (letter "A" with umlaut or diaeresis ; "A-umlaut")
//   143 : Å (Capital letter "A" with a ring)
//   144 : É (Capital letter "E" with acute accent or "E-acute")
//   145 : æ (Latin diphthong "ae" in lowercase)
//   146 : Æ (Latin diphthong "AE" in uppercase)
//   147 : ô (letter "o" with circumflex accent or "o-circumflex")
//   148 : ö (letter "o" with umlaut or diaeresis ; "o-umlaut")
//   149 : ò (letter "o" with grave accent)
//   150 : û (letter "u" with circumflex accent or "u-circumflex")
//   151 : ù (letter "u" with grave accent)
//   152 : ÿ (Lowercase letter "y" with diaeresis)
//   153 : Ö (letter "O" with umlaut or diaeresis ; "O-umlaut")
//   154 : Ü (letter "U" with umlaut or diaeresis ; "U-umlaut")
//   155 : ø (slashed zero or empty set)
//   156 : £ (Pound sign ; symbol for the pound sterling)
//   157 : Ø (slashed zero or empty set)
//   158 : × (multiplication sign)
//   159 : ƒ (function sign ; f with hook sign ; florin sign )
//   160 : á (letter "a" with acute accent or "a-acute")
//   161 : í (letter "i" with acute accent or "i-acute")
//   162 : ó (letter "o" with acute accent or "o-acute")
//   163 : ú (letter "u" with acute accent or "u-acute")
//   164 : ñ (letter "n" with tilde ; enye)
//   165 : Ñ (letter "N" with tilde ; enye)
//   166 : ª (feminine ordinal indicator )
//   167 : º (masculine ordinal indicator)
//   168 : ¿ (Inverted question marks)
//   169 : ® (Registered trademark symbol)
//   170 : ¬ (Logical negation symbol)
//   171 : ½ (One half)
//   172 : ¼ (Quarter or one fourth)
//   173 : ¡ (Inverted exclamation marks)
//   174 : « (Angle quotes or guillemets)
//   175 : » (Guillemets or angle quotes)
//   176 : ░
//   177 : ▒
//   178 : ▓
//   179 : │ (Box drawing character)
//   180 : ┤ (Box drawing character)
//   181 : Á (Capital letter "A" with acute accent or "A-acute")
//   182 : Â (letter "A" with circumflex accent or "A-circumflex")
//   183 : À (letter "A" with grave accent)
//   184 : © (Copyright symbol)
//   185 : ╣ (Box drawing character)
//   186 : ║ (Box drawing cha//187 : ╗ (Box drawing character)
//   188 : ╝ (Box drawing character)
//   189 : ¢ (Cent symbol)
//   190 : ¥ (YEN and YUAN sign)
//   191 : ┐ (Box drawing character)
//   192 : └ (Box drawing character)
//   193 : ┴ (Box drawing character)
//   194 : ┬ (Box drawing character)
//   195 : ├ (Box drawing character)
//   196 : ─ (Box drawing character)
//   197 : ┼ (Box drawing character)
//   198 : ã (Lowercase letter "a" with tilde or "a-tilde")
//   199 : Ã (Capital letter "A" with tilde or "A-tilde")
//   200 : ╚ (Box drawing character)
//   201 : ╔ (Box drawing character)
//   202 : ╩ (Box drawing character)
//   203 : ╦ (Box drawing character)
//   204 : ╠ (Box drawing character)
//   205 : ═ (Box drawing character)
//   206 : ╬ (Box drawing character)
//   207 : ¤ (generic currency sign)
//   208 : ð (Lowercase letter "eth")
//   209 : Ð (Capital letter "Eth")
//   210 : Ê (letter "E" with circumflex accent or "E-circumflex")
//   211 : Ë (letter "E" with umlaut or diaeresis ; "E-umlaut")
//   212 : È (letter "E" with grave accent)
//   213 : ı (lowercase dot less i)
//   214 : Í (Capital letter "I" with acute accent or "I-acute")
//   215 : Î (letter "I" with circumflex accent or "I-circumflex")
//   216 : Ï (letter "I" with umlaut or diaeresis ; "I-umlaut")
//   217 : ┘ (Box drawing character)
//   218 : ┌ (Box drawing character)
//   219 : █ (Block)
//   220 : ▄
//   221 : ¦ (vertical broken bar )
//   222 : Ì (letter "I" with grave accent)
//   223 : ▀
//   224 : Ó (Capital letter "O" with acute accent or "O-acute")
//   225 : ß (letter "Eszett" ; "scharfes S" or "sharp S")
//   226 : Ô (letter "O" with circumflex accent or "O-circumflex")
//   227 : Ò (letter "O" with grave accent)
//   228 : õ (letter "o" with tilde or "o-tilde")
//   229 : Õ (letter "O" with tilde or "O-tilde")
//   230 : µ (Lowercase letter "Mu" ; micro sign or micron)
//   231 : þ (Lowercase letter "Thorn")
//   232 : Þ (Capital letter "thorn")
//   233 : Ú (Capital letter "U" with acute accent or "U-acute")
//   234 : Û (letter "U" with circumflex accent or "U-ci//235 : Ù (letter "U" with grave accent)
//   236 : ý (Lowercase letter "y" with acute accent)
//   237 : Ý (Capital letter "Y" with acute accent)
//   238 : ¯ (macron symbol)
//   239 : ´ (Acute accent)
//   240 : - (Hyphen)
//   241 : ± (Plus-minus sign)
//   242 : ‗ (underline or underscore)
//   243 : ¾ (three quarters)
//   244 : ¶ (paragraph sign or pilcrow)
//   245 : § (Section sign)
//   246 : ÷ (The division sign ; Obelus)
//   247 : ¸ (cedilla)
//   248 : ° (degree symbol )
//   249 : ¨ (Diaeresis)
//   250 : · (Interpunct or space dot)
//   251 : ¹ (superscript one)
//   252 : ³ (cube or superscript three)
//   253 : ² (Square or superscript two)
//   254 : ■ (black square)
//   255 : nbsp (non-breaking space or no-break space)

// Sort method is used to mutate the present array according to user's needs.

const numbers = [5, 71, 23, 8, 10]
numbers.sort()
// Expected result -> 5, 8, 10, 23, 71
console.log(numbers)
// Actual result -> 10, 23, 5, 71, 8

// JS considers each element in array as a string and only takes into consideration its first digit.

// Interpreted array by JS -> ['5', '71', '23', '8', '10']
//The ascii digit denoted to them ->53, 55, 50, 56, 49 
// That's why the order result was 10(49), 23(50), 5(53), 71(55), 8(56) 

const words = ['Harshit', 'Manish', 'Rajendra', 'Himangshu', 'Puneet']
words.sort()
console.log(words)
// If the first digit of two elements is same then second digit is considered. 
// Here the words are arranged exactly according to dictionary order.

// We must remember that sort function, unlike the previous ones, modifies the existing array without creating a new array.

const numbersFix = [55, 3, 40, 29, 67, 1]
numbersFix.sort((a,b) => a-b)
console.log(numbersFix)
// Above code will fix the problem of numbers not being sorted in ascending order.
// Here if a is greater than b then a will be placed before b.
// If a is less than b then a will be placed after b.

const numbersDes = [43, 59, 13, 2, 11, 73]
numbersDes.sort((a,b) => b-a)
console.log(numbersDes)
// Above code is used to print the numbers in descending order.

const cartItems = [
    {productID : 2318, productName : 'MicroOven', price : 2500},
    {productID : 4265, productName : 'SmartTV', price : 19000},
    {productID : 9762, productName : 'IPad', price : 85000},
    {productID : 3516, productName : 'ExtensionCord', price : 750},
    {productID : 6928, productName : 'Type-C Charger', price : 480},
]

// cartItems.sort((a,b) => a.price - b.price)
// console.log(cartItems)

// cartItems.sort((a,b) => b.price - a.price)
// console.log(cartItems)

// If we don't want the original data to change every time then we use slice operator.

const lowToHigh = cartItems.slice(0).sort((a,b) => a.price - b.price)
console.log(lowToHigh)

const highToLow = cartItems.slice(0).sort((a,b) => b.price - a.price)
console.log(highToLow)


